
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract TaskList {
    
    uint32 public timestamp;
    string[] list;
    string l;
    uint8 numberOfTasks=1;

    struct task{
        string name;
        uint32 date;
        bool done;

    }

    mapping(uint8 => task) taskArray;
    

    // Contract can have a `constructor` – function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();  

        timestamp = now;
        
    }

    
    modifier checkOwnerAndAccept {
		// Check that message was signed with contracts key.
		require(msg.pubkey() == tvm.pubkey(), 102);
        
		tvm.accept();
        
		_;
	}
    
    
    //добавить задачу
    function AddTask(string name, bool done ) public checkOwnerAndAccept {
        taskArray[numberOfTasks] = task(name,now,done);
        numberOfTasks++;

	}
    //открытые задача(невыполненные)
    function openedTasks() public checkOwnerAndAccept returns (uint32 k) {
        for (uint8 i = 1; i<numberOfTasks; i++){
            if(taskArray[i].done==false){
                k++;
            }
        }
        return k;
    }
    //все задачи
    function AllTasks() public checkOwnerAndAccept returns (mapping(uint8 => task)){

        return taskArray;
        

	}
    //информация о задаче по ключу
    function KeyofTask(uint8 key) public checkOwnerAndAccept returns (string){
        if(taskArray[key].done==true){
          l='Name of task: '+string(taskArray[key].name)+' done';  
        } else{
            l='Name of task: '+string(taskArray[key].name)+' not done';
        }
        return l;
	}
    //удалить задачу по ключу
    function DeleteTask(uint8 key) public checkOwnerAndAccept {
        delete taskArray[key];

	}
    //пометить задачу выполненной
    function DoneTask(uint8 key) public checkOwnerAndAccept {
        taskArray[key].done=true;

	}
}
